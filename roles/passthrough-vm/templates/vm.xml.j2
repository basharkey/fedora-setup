{% if vm.audio_input_device is defined or vm.audio_output_device is defined %}
<domain type='kvm' xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'>
{% else %}
<domain type='kvm'>
{% endif %}

  <name>{{ vm.name }}</name>
  <uuid>{{ uuid }}</uuid>
  <memory unit='GiB'>{{ vm.memory }}</memory>
  <vcpu placement='static'>{{ vm.cores * vm.threads }}</vcpu>
{% if vm.iothread_pins is defined and vm.disk is defined and vm.disk_type == 'virtio' %}
  <iothreads>1</iothreads>
{% endif %}

{% if vm.cpu_pins is defined or vm.emulator_pins is defined or vm.io_pins is defined %}
  <cputune>
{% if vm.cpu_pins is defined %}
{% for cpu_pin in vm.cpu_pins %}
    <vcpupin vcpu='{{ cpu_pin.vcpu }}' cpuset='{{ cpu_pin.cpuset }}'/>
{% endfor %}
{% endif %}

{% if vm.emulator_pins is defined %}
    <emulatorpin cpuset='{{ vm.emulator_pins }}'/>
{% endif %}

{% if vm.iothread_pins is defined and vm.disk is defined and vm.disk_type == 'virtio' %}
    <iothreadpin iothread='1' cpuset='{{ vm.iothread_pins }}'/>
{% endif %}
  </cputune>
{% endif %}

  <os>
    <type arch='x86_64' machine='q35'>hvm</type>
    <loader readonly='yes' type='pflash'>/usr/share/edk2/ovmf/OVMF_CODE.fd</loader>
    <nvram>/var/lib/libvirt/qemu/nvram/{{ vm.name }}_VARS.fd</nvram>
    <smbios mode='host'/>
  </os>
  <features>
    <acpi/>
    <apic/>
    <kvm>
      <hidden state='on'/>
    </kvm>
    <vmport state='off'/>
  </features>
  <cpu mode='host-passthrough' check='none'>
    <topology sockets='1' cores='{{ vm.cores }}' threads='{{ vm.threads }}'/>
  </cpu>
  <clock offset='localtime'>
    <timer name='rtc' tickpolicy='catchup'/>
    <timer name='pit' tickpolicy='delay'/>
    <timer name='hpet' present='no'/>
  </clock>
  <devices>

{% if vm.disk is defined %}
{% if vm.disk_type == 'virtio' %}
    <disk type='block' device='disk'>
{% if vm.iothread_pins is defined %}
      # The optional queues attribute specifies the number of queues for the controller. For best performance, it's recommended to specify a value matching the number of vCPUs. Since 1.0.5 (QEMU and KVM only)
      <driver name='qemu' type='raw' cache='writeback' discard='unmap' iothread='1' queues='{{ vm.cores * vm.threads }}'/>
{% else %}
      <driver name='qemu' type='raw' cache='writeback' discard='unmap' queues='{{ vm.cores * vm.threads }}'/>
{% endif %}
      <source dev='{{ vm.disk }}'/>
      <target dev='vda' bus='virtio'/>
      <boot order='1'/>
    </disk>
{% else %}
    <disk type='block' device='disk'>
      <driver name='qemu' type='raw' cache='writeback' discard='unmap'/>
      <source dev='{{ vm.disk }}'/>
      <target dev='sdb' bus='sata'/>
      <boot order='1'/>
    </disk>
{% endif %}
{% endif %}

    <disk type='file' device='cdrom'>
      <driver name='qemu' type='raw'/>
      <source file='/usr/share/virtio-win/virtio-win.iso'/>
      <target dev='sda' bus='sata'/>
      <readonly/>
    </disk>
    <controller type='pci' index='0' model='pcie-root'/>
    <interface type='network'>
      <source network='default'/>
      <model type='virtio'/>
      <driver queues='{{ vm.cores * vm.threads }}'/>
    </interface>

{% if vm.audio_input_device is defined or vm.audio_output_device is defined %}
    <sound model='ich9'>
    </sound>
    <audio id='1' type='jack'>
{% if vm.audio_input_device is defined %}
      <input clientName='{{ vm.name }}' connectPorts='{{ vm.audio_input_device }}'/>
{% endif %}

{% if vm.audio_output_device is defined %}
      <output clientName='{{ vm.name }}' connectPorts='{{ vm.audio_output_device }}'/>
{% endif %}
    </audio>
{% endif %}

{% if vm.mouse is defined %}
    <input type='evdev'>
      <source dev='{{ vm.mouse }}'/>
    </input>
    <input type='mouse' bus='virtio'/>
{% endif %}

{% if vm.keyboard is defined %}
    <input type='evdev'>
      <source dev='{{ vm.keyboard }}' grab='all' repeat='on'/>
    </input>
    <input type='keyboard' bus='virtio'/>
{% endif %}

{% if vm.audio_input_device is defined or vm.audio_output_device is defined %}
    </devices>
      <qemu:commandline>
      <qemu:env name='PIPEWIRE_RUNTIME_DIR' value='/run/user/{{ uid }}'/>
      <qemu:env name='PIPEWIRE_LATENCY' value='512/48000'/>
    </qemu:commandline>
{% endif %}
</domain>
